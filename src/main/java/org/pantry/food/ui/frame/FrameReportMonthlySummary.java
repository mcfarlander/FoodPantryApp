/*
  Copyright 2011 Dave Johnson

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
package org.pantry.food.ui.frame;

import java.awt.print.PrinterException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.table.DefaultTableModel;

import org.pantry.food.dao.VisitorsDao;
import org.pantry.food.model.Visit;
import org.pantry.food.reports.ReportMonthlySummary;
import org.pantry.food.ui.common.FormState;

/**
 *
 * @author mcfarland_davej
 */
public class FrameReportMonthlySummary extends javax.swing.JInternalFrame 
{
	private final static Logger log = Logger.getLogger(FrameReportMonthlySummary.class.getName());
	
    private JButton btnPrint;
    private JButton btnSave;
    private JScrollPane jScrollPane1;
    private JTable jTable1;
    private JToolBar jToolBar1;

    /**  */
	private static final long serialVersionUID = 5049930223641696979L;
	
	/** Creates new form FrameReportMonthlySummary */
    public FrameReportMonthlySummary() {
        initComponents();
        loadReport();
    }

    public FrameReportMonthlySummary(int selectMonth){

        initComponents();
        this.monthSelected = selectMonth;
        loadReport();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({ "unchecked", "serial" })
    private void initComponents() {
    	
        jToolBar1 = new javax.swing.JToolBar();
        btnPrint = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setTitle("Montly Summary"); 
        setFrameIcon(new ImageIcon(FrameReportMonthlySummary.class.getResource("/org/pantry/food/resources/images/report_key.png"))); 
        setName("Form"); 
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); 

        btnPrint.setIcon(new ImageIcon(FrameReportMonthlySummary.class.getResource("/org/pantry/food/resources/images/printer.png"))); 
        btnPrint.setText("Print"); 
        btnPrint.setFocusable(false);
        btnPrint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrint.setName("btnPrint"); 
        btnPrint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPrint);

        btnSave.setIcon(new ImageIcon(FrameReportMonthlySummary.class.getResource("/org/pantry/food/resources/images/report_disk.png"))); 
        btnSave.setText("Save..."); 
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setName("btnSave"); 
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSave);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setName("jScrollPane1"); 

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "HouseholdId", "New?", "# Adults", "# Kids", "Working Income", "Other Income", "No Income", "Date"
            }
        ) {
            @SuppressWarnings("rawtypes")
			Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, 
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            @SuppressWarnings("rawtypes")
			@Override
			public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
			public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("jTable1"); 
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {

        printTable();

    }

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {

        FormState.getInstance().setFormOpen(false);
        
    }

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {

        saveToFile();

    }


    private int monthSelected = 0;
    public int getMonthSelected(){ return this.monthSelected; }
    public void setMonthSelected(int iMonth){ this.monthSelected = iMonth; }

    DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");


    private void printTable(){
        try {
            MessageFormat headerFormat = new MessageFormat("Monthly Summary Report Page {0}");
            MessageFormat footerFormat = new MessageFormat("- {0} -");
            this.jTable1.print(JTable.PrintMode.FIT_WIDTH, headerFormat, footerFormat);
        } catch (PrinterException pe) {
            log.log(Level.SEVERE, null, pe);
            JOptionPane.showMessageDialog(this, "There was a problem printing.");
        }

    }// end of printTable
    
    private void loadReport() {
        try {
            VisitorsDao visIo = new VisitorsDao();
            visIo.readCsvFile();

            DefaultTableModel model = (DefaultTableModel)this.jTable1.getModel();
            model.setRowCount(0);

            Calendar cal = Calendar.getInstance();
            Calendar testCal = Calendar.getInstance();

            ArrayList<Visit> monthVisits = new ArrayList<Visit>();
            ArrayList<String> weekNumbers = new ArrayList<String>();

            String[] blankRow = {"", "", "", "", "", "",
                                 "", "", ""};

            int monthSumHouse = 0;
            int monthSumNew = 0;
            int monthSumAdults = 0;
            int monthSumKids = 0;
            int monthSumWorkingIncome = 0;
            int monthSumOtherIncome = 0;
            int monthSumNoIncome = 0;

            // load only the requested visits into an array to loop thru later

            for (int i = 0; i < visIo.getVisitCount(); i++){
                Visit vis = visIo.getVisitList().get(i);

                if (vis.isActive()){

                    //model.addRow(vis.getVisitObject());
                    Date testDate = dateFormat.parse(vis.getVisitDate());
                    testCal.setTime(testDate);

                    if ((testCal.get(Calendar.YEAR) == cal.get(Calendar.YEAR)) &&
                            (testCal.get(Calendar.MONTH) == this.monthSelected)){

                        //System.out.println("adding visit");
                        monthVisits.add(vis);

                        monthSumHouse++; // is this correct?

                        if (vis.isNewCustomer()){
                            monthSumNew++;
                        }

                        monthSumAdults += vis.getNumberAdults();
                        monthSumKids += vis.getNumberKids();

                        if (vis.isWorkingIncome()){
                            monthSumWorkingIncome++;
                        }

                        if (vis.isOtherIncome()){
                            monthSumOtherIncome++;
                        }

                        if (vis.isNoIncome()){
                            monthSumNoIncome++;
                        }

                        
                        boolean bFound = false;
                        for (int j = 0; j < weekNumbers.size(); j++){
                            if (Integer.parseInt(weekNumbers.get(j).toString()) == vis.getVisitorWeekNumber()){
                                bFound = true;
                            }

                        }

                        if (!bFound){
                            weekNumbers.add("" + vis.getVisitorWeekNumber());
                        }

                    }

                }

            }
            
            // loop thru the current visits and get summaries
            Collections.sort(weekNumbers); // sort the week numbers asc


            for (int i = 0; i < weekNumbers.size(); i++){

                int iWeekNumber = Integer.parseInt(weekNumbers.get(i).toString());
                System.out.println("week number:" + iWeekNumber);

                int weekSumHouse = 0;
                int weekSumNew = 0;
                int weekSumAdults = 0;
                int weekSumKids = 0;
                int weekSumWorkingIncome = 0;
                int weekSumOtherIncome = 0;
                int weekSumNoIncome = 0;

                for (int j = 0; j < monthVisits.size(); j++){

                    Visit vis = monthVisits.get(j);

                    if (vis.getVisitorWeekNumber() == iWeekNumber){

                        weekSumHouse++;

                        if (vis.isNewCustomer()){
                            weekSumNew++;
                        }

                        weekSumAdults += vis.getNumberAdults();
                        weekSumKids += vis.getNumberKids();

                        if (vis.isWorkingIncome()){
                            weekSumWorkingIncome++;
                        }

                        if (vis.isOtherIncome()){
                            weekSumOtherIncome++;
                        }

                        if (vis.isNoIncome()){
                            weekSumNoIncome++;
                        }

                        String sNew = "";
                        if (vis.isNewCustomer()){
                            sNew = "Yes";
                        }

                        String sWorking = "";
                        if (vis.isWorkingIncome()){
                            sWorking = "Yes";
                        }

                        String sOther = "";
                        if (vis.isOtherIncome()){
                            sOther = "Yes";
                        }

                        String sNoIncome = "";
                        if (vis.isNoIncome()){
                            sNoIncome = "Yes";
                        }

                        // show the visit info on the table
                        String[] row = {"" + weekSumHouse,
                                        "" + vis.getHouseholdId(),
                                        sNew,
                                        "" + vis.getNumberAdults(),
                                        "" + vis.getNumberKids(),
                                        sWorking,
                                        sOther,
                                        sNoIncome,
                                        "" + vis.getVisitorWeekNumber()
                        };

                        model.addRow(row);


                    }

                }


                    // show the weekly summary info on the table

                    String[] weekRow = {"Week Sum:",
                                        "w=" + weekSumHouse,
                                        "w=" + weekSumNew,
                                        "w=" + weekSumAdults,
                                        "w=" + weekSumKids,
                                        "w=" + weekSumWorkingIncome,
                                        "w=" + weekSumOtherIncome,
                                        "w=" + weekSumNoIncome,
                                        "Week " + (i + 1)
                    };

                    model.addRow(weekRow);
                    model.addRow(blankRow);



            }

            // show the monthly summary line
            String[] monthRow = {"Month Totals:",
                                "T=" + monthSumHouse,
                                "T=" + monthSumNew,
                                "T=" + monthSumAdults,
                                "T=" + monthSumKids,
                                "T=" + monthSumWorkingIncome,
                                "T=" + monthSumOtherIncome,
                                "T=" + monthSumNoIncome,
                                "Month Summary"

                    };

            model.addRow(monthRow);


        } catch (ParseException ex) {
            log.log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            log.log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            log.log(Level.SEVERE, null, ex);
        }
        
    }

    private void saveToFile(){

        ReportMonthlySummary report = new ReportMonthlySummary();
        report.setMonthSelected(monthSelected);
        
        try {
            report.createReportTable();
            report.saveReport();
            JOptionPane.showMessageDialog(this, "The summary has been saved.");
        } catch (IOException ex) {
            log.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "There was a problem saving see log.");
        }

    }

}
