/*
  Copyright 2011 Dave Johnson

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
package org.pantry.food.ui.dialog;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

import org.pantry.food.model.Visit;

import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;



/**
 *
 * @author Dave Johnson
 */
public class AddEditVisitDialog extends javax.swing.JDialog {
	
    private JComboBox<String> cboHouseholdId;
    private JCheckBox chkNew;
    private JCheckBox chkNoIncome;
    private JCheckBox chkOtherIncome;
    private JCheckBox chkWorkingIncome;
    private JButton jButton1;
    private JButton jButton2;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JLabel lblDate;
    private JTextField txtDate;
    private JTextField txtNumberAdults;
    private JTextField txtNumberKids;
    private JLabel lblSeniors;
    private JTextField txtNumberSeniors;


    /**
	 * 
	 */
	private static final long serialVersionUID = -7348240694494159880L;
	/** Creates new form AddVisitDialog */
    public AddEditVisitDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setResizable(false);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        jPanel1 = new JPanel();
        jPanel1.setBounds(10, 6, 464, 284);
        jLabel1 = new JLabel();
        jLabel1.setBounds(34, 36, 92, 16);
        cboHouseholdId = new JComboBox<String>();
        cboHouseholdId.setBounds(144, 30, 90, 27);
        chkNew = new JCheckBox();
        chkNew.setBounds(264, 20, 79, 48);
        jLabel2 = new JLabel();
        jLabel2.setBounds(30, 92, 53, 16);
        txtNumberAdults = new JTextField();
        txtNumberAdults.setBounds(95, 86, 50, 28);
        jLabel3 = new JLabel();
        jLabel3.setBounds(169, 92, 65, 16);
        txtNumberKids = new JTextField();
        txtNumberKids.setBounds(246, 86, 50, 28);
        chkNoIncome = new JCheckBox();
        chkNoIncome.setBounds(317, 144, 100, 30);
        chkWorkingIncome = new JCheckBox();
        chkWorkingIncome.setBounds(30, 147, 134, 23);
        chkOtherIncome = new JCheckBox();
        chkOtherIncome.setBounds(182, 147, 117, 23);
        lblDate = new JLabel();
        lblDate.setBounds(30, 198, 29, 16);
        txtDate = new JTextField();
        txtDate.setBounds(95, 192, 139, 28);
        jPanel2 = new JPanel();
        jPanel2.setBounds(10, 296, 464, 60);
        jButton1 = new JButton();
        jButton1.setBounds(232, 6, 91, 40);
        jButton2 = new JButton();
        jButton2.setBounds(341, 6, 89, 40);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Or Edit Visit"); 
        setAlwaysOnTop(true);
        setName("Form");
        setSize(487, 403);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setName("jPanel1"); 

        jLabel1.setText("House Hold ID"); 
        jLabel1.setName("jLabel1");

        cboHouseholdId.setEditable(true);
        cboHouseholdId.setMaximumRowCount(100);
        cboHouseholdId.setName("cboHousehold"); 

        chkNew.setText("New?"); 

        jLabel2.setText("# Adults"); 
        jLabel2.setName("jLabel2"); 

        txtNumberAdults.setHorizontalAlignment(SwingConstants.RIGHT);
        txtNumberAdults.setText("0"); 
        txtNumberAdults.setName("txtNumberAdults"); 
        txtNumberAdults.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
			public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumberAdultsFocusGained(evt);
            }
        });

        jLabel3.setText("# Children"); 
        jLabel3.setName("jLabel3"); 

        txtNumberKids.setHorizontalAlignment(SwingConstants.RIGHT);
        txtNumberKids.setText("0"); 
        txtNumberKids.setName("txtNumberKids"); 
        txtNumberKids.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
			public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumberKidsFocusGained(evt);
            }
        });

        chkNoIncome.setText("No Income"); 
        chkNoIncome.setName("chkNoIncome"); 
        chkNoIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNoIncomeActionPerformed(evt);
            }
        });

        chkWorkingIncome.setText("Working Income"); 
        chkWorkingIncome.setName("chkWorkingIncome"); 
        chkWorkingIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkWorkingIncomeActionPerformed(evt);
            }
        });

        chkOtherIncome.setText("Other Income"); 
        chkOtherIncome.setName("chkOtherIncome"); 
        chkOtherIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkOtherIncomeActionPerformed(evt);
            }
        });

        lblDate.setText("Date"); 
        lblDate.setName("lblDate"); 

        txtDate.setName("txtDate"); 
        txtDate.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
			public void focusGained(java.awt.event.FocusEvent evt) {
                txtDateFocusGained(evt);
            }
        });
        getContentPane().setLayout(null);

        getContentPane().add(jPanel1);
        jPanel1.setLayout(null);
        jPanel1.add(jLabel2);
        jPanel1.add(txtNumberAdults);
        jPanel1.add(jLabel3);
        jPanel1.add(txtNumberKids);
        
        lblSeniors = new JLabel("# Seniors");
        lblSeniors.setBounds(317, 92, 61, 16);
        jPanel1.add(lblSeniors);
        
        txtNumberSeniors = new JTextField();
        txtNumberSeniors.addFocusListener(new FocusAdapter() {
        	@Override
        	public void focusGained(FocusEvent evt) {
        		txtNumberSeniorsFocusGained(evt);
        	}
        });
        txtNumberSeniors.setHorizontalAlignment(SwingConstants.RIGHT);
        txtNumberSeniors.setText("0");
        txtNumberSeniors.setBounds(387, 86, 50, 28);
        jPanel1.add(txtNumberSeniors);
        txtNumberSeniors.setColumns(10);
        jPanel1.add(jLabel1);
        jPanel1.add(cboHouseholdId);
        jPanel1.add(chkNew);
        jPanel1.add(lblDate);
        jPanel1.add(chkWorkingIncome);
        jPanel1.add(chkOtherIncome);
        jPanel1.add(chkNoIncome);
        jPanel1.add(txtDate);

        jPanel2.setName("jPanel2"); 

        jButton1.setIcon(new ImageIcon(AddEditVisitDialog.class.getResource("/org/pantry/food/resources/images/accept.png"))); 
        jButton1.setText("OK"); 
        jButton1.setName("btnAdd"); 
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButton2.setIcon(new ImageIcon(AddEditVisitDialog.class.getResource("/org/pantry/food/resources/images/cancel.png"))); 
        jButton2.setText("Cancel"); 
        jButton2.setName("btnCancel"); 
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        getContentPane().add(jPanel2);
        jPanel2.setLayout(null);
        jPanel2.add(jButton1);
        jPanel2.add(jButton2);

    }

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {

        if (validateForm()){
            this.OkCancel = true;
            generateVisit();
            this.dispose();
        }
        
    }

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {
        this.OkCancel = false;
        this.visit = null;
        this.dispose();
    }

    private void chkNoIncomeActionPerformed(java.awt.event.ActionEvent evt) {

        if (this.chkNoIncome.isSelected()){
            this.chkWorkingIncome.setSelected(false);
            this.chkOtherIncome.setSelected(false);
        }

    }

    private void chkWorkingIncomeActionPerformed(java.awt.event.ActionEvent evt) {

        if (this.chkWorkingIncome.isSelected()){
            if (this.chkNoIncome.isSelected()){
                this.chkNoIncome.setSelected(false);
            }
        }
        
    }

    private void chkOtherIncomeActionPerformed(java.awt.event.ActionEvent evt) {

        if (this.chkOtherIncome.isSelected()){
            if (this.chkNoIncome.isSelected()){
                this.chkNoIncome.setSelected(false);
            }
        }


    }

    private void txtNumberAdultsFocusGained(java.awt.event.FocusEvent evt) {
        this.txtNumberAdults.selectAll();
    }

    private void txtNumberKidsFocusGained(java.awt.event.FocusEvent evt) {
        this.txtNumberKids.selectAll();
    }
    
    private void txtNumberSeniorsFocusGained(java.awt.event.FocusEvent evt) {
        this.txtNumberSeniors.selectAll();
    }

    private void txtDateFocusGained(java.awt.event.FocusEvent evt) {
        this.txtDate.selectAll();
    }

    private boolean OkCancel = false;
    public boolean getOkCancel(){return this.OkCancel;}

    private Visit visit = new Visit();

    public Visit getNewVisit(){return this.visit;}
    public void setNewVisit(Visit vis){
        this.visit = vis;
        setControlsFromPrevious();
    }

    DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
    

    public void setVisitorList(ArrayList<String> customers){

        String nothingStr = "";
        this.cboHouseholdId.addItem(makeObj(nothingStr).toString());

        for (int i = 0; i < customers.size(); i++){
            String str = customers.get(i);
            this.cboHouseholdId.addItem(makeObj(str).toString());
        }

    }

    private Object makeObj(final String item)  {
        return new Object() {
            @Override
            public String toString() { return item; } };
    }

    private void setControlsFromPrevious(){
        this.cboHouseholdId.setSelectedItem(this.visit.getHouseholdId());
        this.chkNew.setSelected(this.visit.isNewCustomer());
        this.txtNumberAdults.setText("" + this.visit.getNumberAdults());
        this.txtNumberKids.setText("" + this.visit.getNumberKids());
        this.txtNumberSeniors.setText("" + this.visit.getNumberSeniors());
        this.chkWorkingIncome.setSelected(this.visit.isWorkingIncome());
        this.chkOtherIncome.setSelected(this.visit.isOtherIncome());
        this.chkNoIncome.setSelected(this.visit.isNoIncome());
        this.txtDate.setText(this.visit.getVisitDate());
    }

    private void generateVisit(){

        this.visit.setHouseholdId(Integer.parseInt(this.cboHouseholdId.getSelectedItem().toString()));
        this.visit.setNewCustomer(this.chkNew.isSelected());
        this.visit.setNumberAdults(Integer.parseInt(this.txtNumberAdults.getText()));
        this.visit.setNumberKids(Integer.parseInt(this.txtNumberKids.getText()));
        this.visit.setNumberSeniors(Integer.parseInt(this.txtNumberSeniors.getText()));
        this.visit.setWorkingIncome(this.chkWorkingIncome.isSelected());
        this.visit.setOtherIncome(this.chkOtherIncome.isSelected());
        this.visit.setNoIncome(this.chkNoIncome.isSelected());

        this.visit.setVisitDate(this.txtDate.getText());

        //Date date = new Date();
        //this.visit.setVisitDate(dateFormat.format(date));
        int weekNumber = 1;
        try {
            Date dateCal = DateFormat.getDateInstance(DateFormat.SHORT).parse(this.txtDate.getText());
            GregorianCalendar cal = new GregorianCalendar();
            cal.setTime(dateCal);
            weekNumber = cal.get(Calendar.WEEK_OF_YEAR);
            
        } catch (ParseException ex) {
            Logger.getLogger(AddEditVisitDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.visit.setVisitorWeekNumber(weekNumber);

        this.visit.setActive(true);

    }

    private boolean validateForm(){

        /*
         * By Sue's request, some visitors can get entered without a
         * customer number.
         *
         */

        if (this.cboHouseholdId.getItemCount() == 0){
            this.cboHouseholdId.addItem("-1");

        }

        if (this.cboHouseholdId.getSelectedItem().toString().length() == 0){
            //JOptionPane.showMessageDialog(this,"Please select a house hold.");
            //return false;
            this.cboHouseholdId.setSelectedItem("-1");
        }

        try{
            Integer.parseInt(this.cboHouseholdId.getSelectedItem().toString());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please select a house hold.");
            return false;
        }


        if (this.txtNumberAdults.getText().length() == 0){
            JOptionPane.showMessageDialog(this,"Please enter the number of adults.");
            return false;
        }

        try{
            @SuppressWarnings("unused")
			int test = Integer.parseInt(this.txtNumberAdults.getText());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please enter the number of adults.");
            return false;
        }

        if (this.txtNumberKids.getText().length() == 0){
            JOptionPane.showMessageDialog(this,"Please enter the number of kids.");
            return false;
        }

        try{
            @SuppressWarnings("unused")
			int test = Integer.parseInt(this.txtNumberKids.getText());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please enter the number of kids.");
            return false;
        }
        
        if (this.txtNumberSeniors.getText().length() == 0){
            JOptionPane.showMessageDialog(this,"Please enter the number of seniors.");
            return false;
        }

        try{
            @SuppressWarnings("unused")
			int test = Integer.parseInt(this.txtNumberSeniors.getText());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please enter the number of seniors.");
            return false;
        }

        if (this.txtDate.getText().length() == 0){
            JOptionPane.showMessageDialog(this,"Please select an entry date.");
            return false;
        }

        try{
            @SuppressWarnings("unused")
			Date test1 = dateFormat.parse(this.txtDate.getText());
        } catch (ParseException ex){
            JOptionPane.showMessageDialog(this,"Please select an entry date.");
            return false;
        }



        return true;
    }
}// end of class
