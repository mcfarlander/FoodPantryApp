/*
  Copyright 2011 Dave Johnson

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
package org.pantry.food;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import org.pantry.food.io.Customer;
import org.pantry.food.io.CustomersIO;

/**
 *
 * @author mcfarland_davej
 */
public class FrameSettings extends javax.swing.JInternalFrame {
	
    private JButton btnAddMonth1;
    private JButton btnArchive;
    private JCheckBox chkShowInactive;
    private JCheckBox chkShowInactiveVisits;
    private JCheckBox chkShowYearVisits;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;

    /**
	 * 
	 */
	private static final long serialVersionUID = 513215325014000028L;

	/** Creates new form FrameSettings */
    public FrameSettings() {
        initComponents();
        initForm();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        jPanel1 = new JPanel();
        jPanel1.setBounds(18, 6, 530, 87);
        chkShowInactive = new JCheckBox();
        chkShowInactive.setBounds(6, 22, 476, 59);
        jPanel2 = new JPanel();
        jPanel2.setBounds(18, 95, 530, 87);
        chkShowInactiveVisits = new JCheckBox();
        chkShowInactiveVisits.setBounds(6, 22, 476, 27);
        chkShowYearVisits = new JCheckBox();
        chkShowYearVisits.setBounds(6, 54, 476, 27);
        jPanel3 = new JPanel();
        jPanel3.setBounds(18, 194, 530, 87);
        btnArchive = new JButton();
        btnArchive.setBounds(21, 21, 476, 28);
        btnAddMonth1 = new JButton();
        btnAddMonth1.setBounds(21, 53, 476, 28);

        setClosable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.pantry.food.FoodPantryApp.class).getContext().getResourceMap(FrameSettings.class);
        setTitle(resourceMap.getString("Form.title")); 
        setFrameIcon(resourceMap.getIcon("Form.frameIcon")); 
        setName("Form"); 
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Customer Options"));
        jPanel1.setName("jPanel1");

        chkShowInactive.setText("Check to show inactive customers in list"); 
        chkShowInactive.setBorder(null);
        chkShowInactive.setName("chkShowInactive"); 
        chkShowInactive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowInactiveActionPerformed(evt);
            }
        });
        getContentPane().setLayout(null);
        jPanel1.setLayout(null);
        jPanel1.add(chkShowInactive);

        getContentPane().add(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Visits Options"));
        jPanel2.setName("jPanel2");

        chkShowInactiveVisits.setText("Check to show inactive visits on list"); 
        chkShowInactiveVisits.setName("chkShowInactiveVisits"); 
        chkShowInactiveVisits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowInactiveVisitsActionPerformed(evt);
            }
        });
        jPanel2.setLayout(null);
        jPanel2.add(chkShowInactiveVisits);

        chkShowYearVisits.setText("Check to show all visits (yearly). Uncheck to show only monthly visits."); 
        chkShowYearVisits.setName("chkShowYearVisits"); 
        chkShowYearVisits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowYearVisitsActionPerformed(evt);
            }
        });
        jPanel2.add(chkShowYearVisits);

        getContentPane().add(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("File Maintenance"));
        jPanel3.setName("jPanel3");

        btnArchive.setIcon(resourceMap.getIcon("btnArchive.icon")); 
        btnArchive.setText("Archive Current Data Files"); 
        btnArchive.setName("btnArchive"); 
        btnArchive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchiveActionPerformed(evt);
            }
        });
        jPanel3.setLayout(null);
        jPanel3.add(btnArchive);

        btnAddMonth1.setIcon(resourceMap.getIcon("btnAddMonth1.icon")); 
        btnAddMonth1.setText("Add 1 To All Months (Use Once!)"); 
        btnAddMonth1.setEnabled(false);
        btnAddMonth1.setName("btnAddMonth1"); 
        btnAddMonth1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMonth1ActionPerformed(evt);
            }
        });
        jPanel3.add(btnAddMonth1);

        getContentPane().add(jPanel3);

        pack();
    }

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {

        FormState.getInstance().setFormOpen(false);
        
    }

    private void chkShowInactiveActionPerformed(java.awt.event.ActionEvent evt) {

        FormState.getInstance().setShowInactiveCustomers(this.chkShowInactive.isSelected());

    }

    private void chkShowInactiveVisitsActionPerformed(java.awt.event.ActionEvent evt) {

        FormState.getInstance().setShowInactiveVisits(this.chkShowInactiveVisits.isSelected());

    }

    private void chkShowYearVisitsActionPerformed(java.awt.event.ActionEvent evt) {

        FormState.getInstance().setShowAllYearVisits(this.chkShowYearVisits.isSelected());

    }

    private void btnArchiveActionPerformed(java.awt.event.ActionEvent evt) {

        archiveFiles();

    }

    private void btnAddMonth1ActionPerformed(java.awt.event.ActionEvent evt) {
        
        addOneToCustomerMonth();
        
    }


    private void initForm(){

        this.chkShowInactive.setSelected(FormState.getInstance().isShowInactiveCustomers());
        this.chkShowInactiveVisits.setSelected(FormState.getInstance().isShowInactiveVisits());
        this.chkShowYearVisits.setSelected(FormState.getInstance().isShowAllYearVisits());

    }

    private void archiveFiles(){

        int result = JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to archive the files?",
                        "Confirm",
                        JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.NO_OPTION){
            return;
        }

        System.out.println("Starting archiving.");

        try {
            String startDir = new java.io.File(".").getCanonicalPath();
            Calendar cal = Calendar.getInstance();
            String archiveFile = startDir + "/"
                    + "PantryArchive_"
                    + cal.get(Calendar.YEAR)
                    + cal.get(Calendar.MONTH)
                    + cal.get(Calendar.DAY_OF_MONTH)
                    + ".zip";

            String customersFile = startDir + "/" + FormState.getInstance().getCsvFileCustomers();
            String visitsFile = startDir + "/" + FormState.getInstance().getCsvFileVisits();
            String foodRecordFile = startDir + "/" + FormState.getInstance().getCsvFileFoodRecord();
            String volunteerHoursFile = startDir + "/" + FormState.getInstance().getCsvFileVolunteerHours();

            byte[] buf = new byte[1024];

            System.out.println("creating archive:" + archiveFile);

            FileOutputStream fos = new FileOutputStream(archiveFile);
            ZipOutputStream zos = new ZipOutputStream(fos);

            File file1 = new File(customersFile);
            if (file1.exists()){
                System.out.println("Adding customer file to archive:" + file1.getName());
                FileInputStream in = new FileInputStream(file1);
                ZipEntry ze= new ZipEntry(file1.getName());
                zos.putNextEntry(ze);

                // Transfer bytes from the file to the ZIP file
                int len;
                while ((len = in.read(buf)) > 0) {
                    zos.write(buf, 0, len);
                }
                
                zos.closeEntry();
                in.close();
                file1.delete(); // delete the curren file
            }

            File file2 = new File(visitsFile);
            if (file2.exists()){
                System.out.println("Adding visits file to archive:" + file2.getName());
                FileInputStream in = new FileInputStream(file2);
                ZipEntry ze= new ZipEntry(file2.getName());
                zos.putNextEntry(ze);

                // Transfer bytes from the file to the ZIP file
                int len;
                while ((len = in.read(buf)) > 0) {
                    zos.write(buf, 0, len);
                }


                zos.closeEntry();
                in.close();
                file2.delete(); // delete the current file
            }

            File file3 = new File(foodRecordFile);
            if (file3.exists()){
                System.out.println("Adding food record file to archive:" + file3.getName());
                FileInputStream in = new FileInputStream(file3);
                ZipEntry ze= new ZipEntry(file3.getName());
                zos.putNextEntry(ze);

                // Transfer bytes from the file to the ZIP file
                int len;
                while ((len = in.read(buf)) > 0) {
                    zos.write(buf, 0, len);
                }


                zos.closeEntry();
                in.close();
                file3.delete(); // delete the current file
            }

            File file4 = new File(volunteerHoursFile);
            if (file4.exists()){
                System.out.println("Adding volunteer hours file to archive:" + file4.getName());
                FileInputStream in = new FileInputStream(file4);
                ZipEntry ze= new ZipEntry(file4.getName());
                zos.putNextEntry(ze);

                // Transfer bytes from the file to the ZIP file
                int len;
                while ((len = in.read(buf)) > 0) {
                    zos.write(buf, 0, len);
                }


                zos.closeEntry();
                in.close();
                file4.delete(); // delete the current file
            }


            zos.close();
            JOptionPane.showMessageDialog(this,
                    "Archive created OK. File can be found at:" + archiveFile);


        } catch (IOException ex) {
            Logger.getLogger(FrameSettings.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    "Unable to archive files. See log files for details.");
        }

    }

    private void addOneToCustomerMonth(){

        try {
            int result = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to add 1 to each customer's registered month?",
                    "Confirm",
                    JOptionPane.YES_NO_OPTION);
            
            if (result == JOptionPane.NO_OPTION) {
                return;
            }
            
            System.out.println("starting to add 1 to each customer's registered month.");
            CustomersIO custIO = new CustomersIO();
            custIO.readCsvFile();

            int iMonth = 0;

            for ( Customer cust : custIO.getCustomerList() ) {
                iMonth = cust.getMonthRegistered() + 1;
                cust.setMonthRegistered(iMonth);
            }

            custIO.saveCsvFile();



        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrameSettings.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrameSettings.class.getName()).log(Level.SEVERE, null, ex);
        }


    }




}// end of class
