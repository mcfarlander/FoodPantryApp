/*
  Copyright 2011 Dave Johnson

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
package org.pantry.food;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.table.DefaultTableModel;

import org.pantry.food.io.VolunteerHour;
import org.pantry.food.io.VolunteerHourIO;

/**
 *
 * @author davej
 */
public class FrameVolunteerHours extends javax.swing.JInternalFrame {


    private JButton btnAdd;
    private JButton btnDelete;
    private JButton btnEdit;
    private JScrollPane jScrollPane1;
    private JTable jTable1;
    private JToolBar jToolBar1;

    /**
	 * 
	 */
	private static final long serialVersionUID = -3993940824072993340L;

	/** Creates new form FrameVolunteerHours */
    public FrameVolunteerHours() {
        initComponents();
        loadRecords();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({ "unchecked", "serial" })
    private void initComponents() {

        jToolBar1 = new JToolBar();
        btnAdd = new JButton();
        btnEdit = new JButton();
        btnDelete = new JButton();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();

        setClosable(true);
        setTitle("Volunteer Hours"); 
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.pantry.food.FoodPantryApp.class).getContext().getResourceMap(FrameVolunteerHours.class);
        setFrameIcon(resourceMap.getIcon("Form.frameIcon")); 
        setName("Form"); 

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); 

        btnAdd.setIcon(resourceMap.getIcon("btnAdd.icon")); 
        btnAdd.setText("Add Hours"); 
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setName("btnAdd"); 
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAdd);

        btnEdit.setIcon(resourceMap.getIcon("btnEdit.icon")); 
        btnEdit.setText("Edit Hours"); 
        btnEdit.setFocusable(false);
        btnEdit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEdit.setName("btnEdit"); 
        btnEdit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEdit);

        btnDelete.setIcon(resourceMap.getIcon("btnDelete.icon")); 
        btnDelete.setText("Delete Hours"); 
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setName("btnDelete");
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDelete);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setName("jScrollPane1"); 

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "VH ID", "Num Adults", "Adult Hrs", "Num Students", "Student Hrs", "Comment", "Entry Date"
            }
        ) {
            @SuppressWarnings("rawtypes")
			Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            @SuppressWarnings("rawtypes")
			@Override
			public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
			public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("jTable1"); 
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {

        AddEditVolunteerHours dial = new AddEditVolunteerHours(null, true);
        VolunteerHour record = new VolunteerHour();
        record.setVolunteerHourId(this.nextRecordId);
        record.setEntryDate(this.getCurrentDateString());
        dial.setNewRecord(record);
        dial.setLocationRelativeTo(this);

        dial.setVisible(true);

        if (dial.getOkCancel()){

            recordIo.addVolunteerHour(dial.getNewRecord());

            DefaultTableModel model = (DefaultTableModel)this.jTable1.getModel();
            model.addRow(dial.getNewRecord().getVolunteerHourObject());

            saveRecords();
            nextRecordId++;
        }

    }

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {

        VolunteerHour record = getSelectedRecord();

        if (record != null){
            AddEditVolunteerHours dial = new AddEditVolunteerHours(null, true);
            dial.setNewRecord(record);
            dial.setLocationRelativeTo(this);
            dial.setVisible(true);

            if (dial.getOkCancel()){
                recordIo.editVolunteerHour(dial.getNewRecord());
                saveRecords();
                loadRecords();
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select a food record to edit.");
        }


    }

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {

        VolunteerHour record = getSelectedRecord();

        if (record != null){

            int result = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete the selected volunteer hours?",
                "Confirm", JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.YES_OPTION){
                //custIo.deleteCustomer(newCust);
                recordIo.deleteVolunteerHour(record);

                saveRecords();
                loadRecords();
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select volunteer hours to delete.");
        }

    }


    private VolunteerHourIO recordIo = new VolunteerHourIO();
    private int nextRecordId = 0;

    private void loadRecords(){

        try {
            recordIo.readCsvFile();
            DefaultTableModel model = (DefaultTableModel)this.jTable1.getModel();
            model.setRowCount(0);

            for (int i = 0; i < recordIo.getCvsCount(); i++){
               VolunteerHour record = recordIo.getCvsList().get(i);

               model.addRow(record.getVolunteerHourObject());

                if (record.getVolunteerHourId() >= nextRecordId){
                    nextRecordId = record.getVolunteerHourId() + 1;
                }
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrameVisits.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrameVisits.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void saveRecords(){
        try {
            recordIo.saveCsvFile();
        } catch (IOException ex) {
            Logger.getLogger(FrameFoodRecords.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private VolunteerHour getSelectedRecord(){

        VolunteerHour rec = null;

        int irow = this.jTable1.getSelectedRow();

        if (irow > -1){
            int iId = Integer.parseInt(this.jTable1.getModel().getValueAt(irow, 0).toString());

            for (int i = 0; i < this.recordIo.getCvsCount(); i++){
                VolunteerHour record = this.recordIo.getCvsList().get(i);
                if (record.getVolunteerHourId() == iId){
                    rec = record;
                    break;
                }
            }

        }

        return rec;
    }


    private String getCurrentDateString(){

        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        return dateFormat.format(new Date());

    }


}
