/*
  Copyright 2011 Dave Johnson

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
package org.pantry.food;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.table.DefaultTableModel;


import org.pantry.food.io.Visit;
import org.pantry.food.io.VisitorsIO;


/**
 *
 * @author mcfarland_davej
 */
@SuppressWarnings("unused")
public class FrameVisits extends javax.swing.JInternalFrame {
	
    private JButton jButton1;
    private JButton jButton2;
    private JButton jButton3;
    private JScrollPane jScrollPane1;
    private JTable jTable1;
    private JToolBar jToolBar1;

    /**
	 * 
	 */
	private static final long serialVersionUID = -2823894451351907109L;


	/** Creates new form FrameVisits */
    public FrameVisits() {
        initComponents();

        this.jTable1.setDefaultRenderer(Object.class, new ProblemTableCellRender());

        loadVisits();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({ "unchecked", "serial" })
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.pantry.food.FoodPantryApp.class).getContext().getResourceMap(FrameVisits.class);
        setTitle(resourceMap.getString("Form.title")); 
        setFrameIcon(resourceMap.getIcon("Form.frameIcon")); 
        setName("Form"); 
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); 

        jButton1.setIcon(resourceMap.getIcon("btnAdd.icon")); 
        jButton1.setText(resourceMap.getString("btnAdd.text")); 
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setName("btnAdd"); 
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setIcon(resourceMap.getIcon("btnEdit.icon")); 
        jButton2.setText(resourceMap.getString("btnEdit.text")); 
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setName("btnEdit"); 
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setIcon(resourceMap.getIcon("btnDelete.icon")); 
        jButton3.setText("Deactivate Visit"); 
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setName("btnDelete"); 
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setName("jScrollPane1"); 

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Visit ID", "HouseHold Id", "New?", "# Adults", "# Kids", "Working Income", "Other Income", "No Income", "Date", "Week Number"
            }
        ) {
            @SuppressWarnings("rawtypes")
			Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            @SuppressWarnings("rawtypes")
			@Override
			public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
			public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(0, 0, 0));
        jTable1.setName("jTable1"); // NOI18N
        jTable1.setShowGrid(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTable1.columnModel.title0")); 
        jTable1.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTable1.columnModel.title1")); 
        jTable1.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTable1.columnModel.title2")); 
        jTable1.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("jTable1.columnModel.title3")); 
        jTable1.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("jTable1.columnModel.title4")); 
        jTable1.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("jTable1.columnModel.title5")); 
        jTable1.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("jTable1.columnModel.title6")); 
        jTable1.getColumnModel().getColumn(7).setHeaderValue(resourceMap.getString("jTable1.columnModel.title7")); 
        jTable1.getColumnModel().getColumn(8).setHeaderValue(resourceMap.getString("jTable1.columnModel.title8")); 
        jTable1.getColumnModel().getColumn(9).setHeaderValue(resourceMap.getString("jTable1.columnModel.title9")); 

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {

        AddEditVisitDialog dial = new AddEditVisitDialog(null, true);
        dial.setVisitorList(currentVisitors);
        Visit vis = new Visit();
        vis.setVisitId(this.nextVisitId);
        vis.setVisitDate(this.getCurrentDateString());
        dial.setNewVisit(vis);
        dial.setLocationRelativeTo(this);
        
        dial.setVisible(true);

        if (dial.getOkCancel()){

            visIo.addVisit(dial.getNewVisit());

            DefaultTableModel model = (DefaultTableModel)this.jTable1.getModel();
            model.addRow(dial.getNewVisit().getVisitObject());

            saveVisits();
            nextVisitId++;
        }
        
        
    }

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {

        Visit newVis = getSelectedVisit();

        if (newVis != null){
            AddEditVisitDialog dial = new AddEditVisitDialog(null, true);
            dial.setVisitorList(currentVisitors);
            dial.setNewVisit(newVis);
            dial.setLocationRelativeTo(this);
            dial.setVisible(true);

            if (dial.getOkCancel()){
                visIo.editVisit(dial.getNewVisit());
                saveVisits();
                loadVisits();
            }
            
        } else {
            JOptionPane.showMessageDialog(this, "Please select a visit to edit.");
        }

    }

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {


        Visit newVisit = getSelectedVisit();

        if (newVisit != null){

            int result = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to deactivate the selected visit?",
                "Confirm", JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.YES_OPTION){
                //visIo.deleteVisit(newVisit);
                newVisit.setActive((false));
                visIo.editVisit(newVisit);

                saveVisits();
                loadVisits();
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select a visit to delete.");
        }
    }

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {

        FormState.getInstance().setFormOpen(false);
        
    }

    private VisitorsIO visIo = new VisitorsIO();
    private int nextVisitId = 0;
    private ArrayList<String> currentVisitors = new ArrayList<String>();


    private void loadVisits(){
        try {
            visIo.readCsvFile();

            DefaultTableModel model = (DefaultTableModel)this.jTable1.getModel();
            model.setRowCount(0);

            DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
            Calendar cal = Calendar.getInstance();
            Calendar visCal = Calendar.getInstance();

            for (int i = 0; i < visIo.getVisitCount(); i++){
                Visit vis = visIo.getVisitList().get(i);

                Date visDate = dateFormat.parse(vis.getVisitDate());
                visCal.setTime(visDate);

                if (FormState.getInstance().isShowInactiveVisits()){

                    if (FormState.getInstance().isShowAllYearVisits()){
                        model.addRow(vis.getVisitObject());
                    } else {
                        if (visCal.get(Calendar.MONTH) == cal.get(Calendar.MONTH)){
                            model.addRow(vis.getVisitObject());
                        }
                    }


                } else {
                    if (vis.isActive()){
                        if (FormState.getInstance().isShowAllYearVisits()){
                            model.addRow(vis.getVisitObject());
                        } else {
                            if (visCal.get(Calendar.MONTH) == cal.get(Calendar.MONTH)){
                                model.addRow(vis.getVisitObject());
                            }
                        }
                    }
                }

                currentVisitors.add("" + vis.getHouseholdId());

                if (vis.getVisitId() >= nextVisitId){
                    nextVisitId = vis.getVisitId() + 1;
                }
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrameVisits.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrameVisits.class.getName()).log(Level.SEVERE, null, ex);
        } catch (java.text.ParseException ex) {
            Logger.getLogger(FrameVisits.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    
    private void saveVisits(){
        try {
            visIo.saveCsvFile();
        } catch (IOException ex) {
            Logger.getLogger(FrameVisits.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
    }

    private Visit getSelectedVisit(){

        Visit visit = null;

        int irow = this.jTable1.getSelectedRow();

        if (irow > -1){
            int iVisitId = Integer.parseInt(this.jTable1.getModel().getValueAt(irow, 0).toString());

            for (int i = 0; i < this.visIo.getVisitCount(); i++){
                Visit vis = this.visIo.getVisitList().get(i);
                if (vis.getVisitId() == iVisitId){
                    visit = vis;
                    break;
                }
            }

        }

        return visit;
    }
    

    private String getCurrentDateString(){

        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        return dateFormat.format(new Date());

    }


}//end of class
