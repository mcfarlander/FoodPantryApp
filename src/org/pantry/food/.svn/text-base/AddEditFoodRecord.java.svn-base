/*
  Copyright 2011 Dave Johnson

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
package org.pantry.food;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

import org.pantry.food.io.FoodRecord;

public class AddEditFoodRecord extends JDialog {
	
    /**
	 * 
	 */
	private static final long serialVersionUID = -2414702577508097538L;
	
	private JButton btnCancel;
    private JButton btnOk;
    private JPanel jPanel2;
    private JLabel lblComment;
    private JLabel lblCommunity;
    private JLabel lblDate;
    private JLabel lblNonFood;
    private JLabel lblNonTefap;
    private JLabel lblOther1;
    private JLabel lblPantry;
    private JLabel lblPickNSave;
    private JLabel lblSecHarvest;
    private JLabel lblTefap;
    private JTextField txtComments;
    private JTextField txtCommunity;
    private JTextField txtDate;
    private JTextField txtNonFood;
    private JTextField txtNonTefap;
    private JTextField txtOther;
    private JTextField txtPantry;
    private JTextField txtPickNSave;
    private JTextField txtSecHarvest;
    private JTextField txtTefap;

	/**
	 * Create the frame.
	 */
	public AddEditFoodRecord(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		setTitle("Add Edit Food Record");
		setBounds(100, 100, 567, 467);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		
		initComponents();

	}
	
	private void initComponents()
	{
		getContentPane().setLayout(null);
	
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.pantry.food.FoodPantryApp.class).getContext().getResourceMap(AddEditFoodRecord.class);
		
		lblPickNSave = new JLabel();
		lblPickNSave.setBounds(67, 15, 91, 34);
		lblPickNSave.setText("Pick N Save"); 
		lblPickNSave.setName("lblPickNSave");
		getContentPane().add(lblPickNSave);
		
		txtPickNSave = new JTextField();
		txtPickNSave.setBounds(153, 18, 65, 28);
		txtPickNSave.setHorizontalAlignment(SwingConstants.RIGHT);
		txtPickNSave.setText("0.0"); 
		txtPickNSave.setName("txtPickNSave");
		txtPickNSave.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtPickNSaveFocusGained(evt);
			}
		});
		getContentPane().add(txtPickNSave);

		
		lblCommunity = new JLabel();
		lblCommunity.setText("Community"); 
		lblCommunity.setName("lblCommunity");
		lblCommunity.setBounds(273, 24, 73, 16);
		getContentPane().add(lblCommunity);
		
		txtCommunity = new JTextField();
		txtCommunity.setBounds(374, 18, 60, 28);
		txtCommunity.setHorizontalAlignment(SwingConstants.RIGHT);
		txtCommunity.setText("0.0"); 
		txtCommunity.setName("txtCommunity");
		txtCommunity.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtCommunityFocusGained(evt);
			}
		});
		getContentPane().add(txtCommunity);
		
		lblNonTefap = new JLabel();
		lblNonTefap.setBounds(70, 71, 72, 16);
		lblNonTefap.setText("Non-TEFAP"); 
		lblNonTefap.setName("lblNonTefap");
		getContentPane().add(lblNonTefap);

		
		txtNonTefap = new JTextField();
		txtNonTefap.setBounds(153, 61, 65, 28);
		txtNonTefap.setHorizontalAlignment(SwingConstants.RIGHT);
		txtNonTefap.setText("0.0"); 
		txtNonTefap.setName("txtNonTefap"); 
		txtNonTefap.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtNonTefapFocusGained(evt);
			}
		});
		getContentPane().add(txtNonTefap);
		
		lblTefap = new JLabel();
		lblTefap.setBounds(273, 71, 38, 16);
		lblTefap.setText("TEFAP"); 
		lblTefap.setName("lblTefap");
		getContentPane().add(lblTefap);

		txtTefap = new JTextField();
		txtTefap.setBounds(374, 58, 60, 28);
		txtTefap.setHorizontalAlignment(SwingConstants.RIGHT);
		txtTefap.setText("0.0"); 
		txtTefap.setName("txtTefap");
		txtTefap.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtTefapFocusGained(evt);
			}
		});
		getContentPane().add(txtTefap);
		
 
		lblSecHarvest = new JLabel();
		lblSecHarvest.setBounds(67, 107, 76, 16);
		lblSecHarvest.setText("2nd Harvest"); 
		lblSecHarvest.setName("lblSecHarvest");
		getContentPane().add(lblSecHarvest);
		
		txtSecHarvest = new JTextField();
		txtSecHarvest.setBounds(153, 101, 65, 28);
		txtSecHarvest.setHorizontalAlignment(SwingConstants.RIGHT);
		txtSecHarvest.setText("0.0"); 
		txtSecHarvest.setName("txtSecHarvest"); 
		txtSecHarvest.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtSecHarvestFocusGained(evt);
			}
		});
		getContentPane().add(txtSecHarvest);
		
		lblPantry = new JLabel();
		lblPantry.setBounds(273, 99, 65, 35);
		lblPantry.setText("Pantry"); 
		lblPantry.setName("lblPantry");
		getContentPane().add(lblPantry);
		
		
		txtPantry = new JTextField();
		txtPantry.setBounds(374, 106, 60, 22);
		txtPantry.setHorizontalAlignment(SwingConstants.RIGHT);
		txtPantry.setText("0.0"); 
		txtPantry.setName("txtPantry");
		txtPantry.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtPantryFocusGained(evt);
			}
		});
		getContentPane().add(txtPantry);
		
		lblOther1 = new JLabel();
		lblOther1.setBounds(67, 158, 35, 16);
		lblOther1.setText("Other"); 
		lblOther1.setName("lblOther1");
		getContentPane().add(lblOther1);
		
		txtOther = new JTextField();
		txtOther.setBounds(153, 152, 65, 28);
		txtOther.setHorizontalAlignment(SwingConstants.RIGHT);
		txtOther.setText("0.0"); 
		txtOther.setName("txtOther"); 
		txtOther.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtOtherFocusGained(evt);
			}
		});
		getContentPane().add(txtOther);
		
		lblNonFood = new JLabel();
		lblNonFood.setBounds(273, 158, 65, 16);
		lblNonFood.setText("Non-Food"); 
		lblNonFood.setName("lblNonFood");
		getContentPane().add(lblNonFood);
		
		txtNonFood = new JTextField();
		txtNonFood.setBounds(374, 152, 60, 28);
		txtNonFood.setHorizontalAlignment(SwingConstants.RIGHT);
		txtNonFood.setText("0.0"); 
		txtNonFood.setName("txtNonFood"); 
		txtNonFood.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtNonFoodFocusGained(evt);
			}
		});
		getContentPane().add(txtNonFood);
		
		JLabel lblMilk = new JLabel();
		lblMilk.setText("Milk");
		lblMilk.setName("lblMilk");
		lblMilk.setBounds(67, 211, 65, 16);
		getContentPane().add(lblMilk);
		
		txtMilk = new JTextField();
		txtMilk.setText("0.0");
		txtMilk.setName("txtMilk");
		txtMilk.setHorizontalAlignment(SwingConstants.RIGHT);
		txtMilk.setBounds(153, 205, 65, 28);
		txtMilk.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtMilkFocusGained(evt);
			}
		});
		getContentPane().add(txtMilk);
		
		lblDate = new JLabel();
		lblDate.setBounds(107, 283, 51, 16);
		lblDate.setText("Date"); 
		lblDate.setName("lblDate");
		getContentPane().add(lblDate);
		
		txtDate = new JTextField();
		txtDate.setBounds(211, 277, 185, 28);
		txtDate.setName("txtDate"); 
		txtDate.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtDateFocusGained(evt);
			}
		});
		getContentPane().add(txtDate);
		
		lblComment = new JLabel();
		lblComment.setBounds(109, 323, 68, 16);
		lblComment.setText("Comments"); 
		lblComment.setName("lblComment");
		getContentPane().add(lblComment);
		
		txtComments = new JTextField();
		txtComments.setBounds(211, 317, 185, 28);
		txtComments.setName("txtComments"); 
		txtComments.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtCommentsFocusGained(evt);
			}
		});
		getContentPane().add(txtComments);
		
 
		jPanel2 = new JPanel();
		jPanel2.setBounds(6, 379, 551, 60);
		jPanel2.setName("jPanel2"); 
		jPanel2.setLayout(null);
		
		btnOk = new JButton();
		btnOk.setBounds(328, 5, 105, 49);
		btnOk.setIcon(resourceMap.getIcon("btnOk.icon")); 
		btnOk.setText("OK"); 
		btnOk.setName("btnOk"); 
		btnOk.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnOkActionPerformed(evt);
			}
		});
		jPanel2.add(btnOk);

		btnCancel = new JButton();
		btnCancel.setBounds(445, 5, 100, 49);
		btnCancel.setIcon(resourceMap.getIcon("btnCancel.icon")); 
		btnCancel.setText("Cancel"); 
		btnCancel.setName("btnCancel"); 
		btnCancel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnCancelActionPerformed(evt);
			}
		});
		jPanel2.add(btnCancel);
		
		getContentPane().add(jPanel2);


	}

    

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {
        this.OkCancel = false;
        this.record = null;
        this.dispose();
    }

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {
        if (validateForm()){
            this.OkCancel = true;
            generateRecord();
            this.dispose();
        }
    }
    
    private void txtPickNSaveFocusGained(java.awt.event.FocusEvent evt) {
        txtPickNSave.selectAll();
    }

    private void txtCommunityFocusGained(java.awt.event.FocusEvent evt) {
        txtCommunity.selectAll();
    }

    private void txtNonTefapFocusGained(java.awt.event.FocusEvent evt) {
        txtNonTefap.selectAll();
    }

    private void txtTefapFocusGained(java.awt.event.FocusEvent evt) {
        txtTefap.selectAll();
    }

    private void txtSecHarvestFocusGained(java.awt.event.FocusEvent evt) {
        txtSecHarvest.selectAll();
    }

    private void txtPantryFocusGained(java.awt.event.FocusEvent evt) {
        txtPantry.selectAll();
    }

    private void txtCommentsFocusGained(java.awt.event.FocusEvent evt) {
        txtComments.selectAll();
    }

    private void txtNonFoodFocusGained(java.awt.event.FocusEvent evt) {
        txtNonFood.selectAll();
    }

    private void txtOtherFocusGained(java.awt.event.FocusEvent evt) {
        txtOther.selectAll();
    }
    
    private void txtMilkFocusGained(java.awt.event.FocusEvent evt) {
        txtMilk.selectAll();
    }


    private void txtDateFocusGained(java.awt.event.FocusEvent evt) {
        txtDate.selectAll();
    }


    private boolean OkCancel = false;
    public boolean getOkCancel(){return this.OkCancel;}


    private FoodRecord record = new FoodRecord();

    public FoodRecord getNewRecord(){return this.record;}
    public void setNewRecord(FoodRecord rec){
        this.record = rec;
        setControlsFromPrevious();
    }

    DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
    private JTextField txtMilk;

    private void setControlsFromPrevious(){

        this.txtPickNSave.setText("" + this.record.getPickNSave());
        this.txtCommunity.setText("" + this.record.getCommunity());
        this.txtNonTefap.setText("" + this.record.getNonTefap());
        this.txtTefap.setText("" + this.record.getTefap());
        this.txtSecHarvest.setText("" + this.record.getSecHarvest());
        this.txtPantry.setText("" + this.record.getPantry());
        this.txtOther.setText("" + this.record.getOther());
        this.txtComments.setText(this.record.getComment());
        this.txtNonFood.setText("" + this.record.getNonFood());
        this.txtMilk.setText("" + this.record.getMilk());
        this.txtDate.setText(this.record.getEntryDate());

    }

    private void generateRecord(){

        this.record.setPickNSave(Double.parseDouble(txtPickNSave.getText()));
        this.record.setCommunity(Double.parseDouble(this.txtCommunity.getText()));
        this.record.setNonTefap(Double.parseDouble(this.txtNonTefap.getText()));
        this.record.setTefap(Double.parseDouble(this.txtTefap.getText()));
        this.record.setSecHarvest(Double.parseDouble(this.txtSecHarvest.getText()));
        this.record.setPantry(Double.parseDouble(this.txtPantry.getText()));
        this.record.setOther(Double.parseDouble(this.txtOther.getText()));
        this.record.setComment(this.txtComments.getText());
        this.record.setNonFood(Double.parseDouble(this.txtNonFood.getText()));
        this.record.setMilk(Double.parseDouble(txtMilk.getText()));

        //Date date = new Date();
        //this.record.setEntryDate(dateFormat.format(date));

        this.record.setEntryDate(this.txtDate.getText());

    }

    private boolean validateForm(){

        @SuppressWarnings("unused")
		double test;

        try{
            test = Double.parseDouble(this.txtPickNSave.getText());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please enter a valid number from Pick N Save.");
            return false;
        }

        try{
            test = Double.parseDouble(this.txtCommunity.getText());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please enter a valid number from the community.");
            return false;
        }

        try{
            test = Double.parseDouble(this.txtNonTefap.getText());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please enter a valid number from Non-Tefap.");
            return false;
        }

        try{
            test = Double.parseDouble(this.txtTefap.getText());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please enter a valid number from TEFAP.");
            return false;
        }

        try{
            test = Double.parseDouble(this.txtSecHarvest.getText());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please enter a valid number from Second Harvest.");
            return false;
        }

        try{
            test = Double.parseDouble(this.txtPantry.getText());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please enter a valid number from pantry purchases.");
            return false;
        }

        try{
            test = Double.parseDouble(this.txtOther.getText());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please enter a valid number from other purchases.");
            return false;
        }

        try{
            test = Double.parseDouble(this.txtNonFood.getText());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please enter a valid number from non-food items.");
            return false;
        }
        
        try{
            test = Double.parseDouble(this.txtMilk.getText());
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Please enter a valid number for milk items.");
            return false;
        }

        if (this.txtDate.getText().length() == 0){
            JOptionPane.showMessageDialog(this,"Please select an entry date.");
            return false;
        }

        try{
            @SuppressWarnings("unused")
			Date test1 = dateFormat.parse(this.txtDate.getText());
        } catch (ParseException ex){
            JOptionPane.showMessageDialog(this,"Please select an entry date.");
            return false;
        }



        return true;
    }
}
